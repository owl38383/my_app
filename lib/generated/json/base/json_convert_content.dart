// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:my_app/common/entitys/apps/market_mine_entity.dart';
import 'package:my_app/common/entitys/company/company_list_entity.dart';
import 'package:my_app/common/entitys/event/event_list_home_page_entity.dart';
import 'package:my_app/common/entitys/login/user_login_request_entity.dart';
import 'package:my_app/common/entitys/login/user_login_resp_entity.dart';
import 'package:my_app/common/entitys/statistic/count_by_cared_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<MarketMineEntity>[] is M) {
      return data.map<MarketMineEntity>((Map<String, dynamic> e) => MarketMineEntity.fromJson(e)).toList() as M;
    }
    if (<MarketMineData>[] is M) {
      return data.map<MarketMineData>((Map<String, dynamic> e) => MarketMineData.fromJson(e)).toList() as M;
    }
    if (<MarketMineDataGroups>[] is M) {
      return data.map<MarketMineDataGroups>((Map<String, dynamic> e) => MarketMineDataGroups.fromJson(e)).toList() as M;
    }
    if (<MarketMineDataTicker>[] is M) {
      return data.map<MarketMineDataTicker>((Map<String, dynamic> e) => MarketMineDataTicker.fromJson(e)).toList() as M;
    }
    if (<CompanyListEntity>[] is M) {
      return data.map<CompanyListEntity>((Map<String, dynamic> e) => CompanyListEntity.fromJson(e)).toList() as M;
    }
    if (<CompanyListData>[] is M) {
      return data.map<CompanyListData>((Map<String, dynamic> e) => CompanyListData.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataList>[] is M) {
      return data.map<CompanyListDataList>((Map<String, dynamic> e) => CompanyListDataList.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompany>[] is M) {
      return data.map<CompanyListDataListInfoCompany>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompany.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompanyEnumCompanyCategory>[] is M) {
      return data.map<CompanyListDataListInfoCompanyEnumCompanyCategory>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompanyEnumCompanyCategory.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompanyEnumCompanyType>[] is M) {
      return data.map<CompanyListDataListInfoCompanyEnumCompanyType>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompanyEnumCompanyType.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompanyEnumCompanyOnlineStatus>[] is M) {
      return data.map<CompanyListDataListInfoCompanyEnumCompanyOnlineStatus>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompanyEnumCompanyOnlineStatus.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompanyEnumCompanyEconomic>[] is M) {
      return data.map<CompanyListDataListInfoCompanyEnumCompanyEconomic>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompanyEnumCompanyEconomic.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompanyEnumCompanyRegulatorLevel>[] is M) {
      return data.map<CompanyListDataListInfoCompanyEnumCompanyRegulatorLevel>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompanyEnumCompanyRegulatorLevel.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompanyEnumRegion>[] is M) {
      return data.map<CompanyListDataListInfoCompanyEnumRegion>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompanyEnumRegion.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompanyEnumVerifyState>[] is M) {
      return data.map<CompanyListDataListInfoCompanyEnumVerifyState>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompanyEnumVerifyState.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompanyEnumSourceFrom>[] is M) {
      return data.map<CompanyListDataListInfoCompanyEnumSourceFrom>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompanyEnumSourceFrom.fromJson(e)).toList() as M;
    }
    if (<CompanyListDataListInfoCompanyEnumCompanyCheckoutStatus>[] is M) {
      return data.map<CompanyListDataListInfoCompanyEnumCompanyCheckoutStatus>((Map<String, dynamic> e) =>
          CompanyListDataListInfoCompanyEnumCompanyCheckoutStatus.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageEntity>[] is M) {
      return data.map<EventListHomePageEntity>((Map<String, dynamic> e) => EventListHomePageEntity.fromJson(e))
          .toList() as M;
    }
    if (<EventListHomePageData>[] is M) {
      return data.map<EventListHomePageData>((Map<String, dynamic> e) => EventListHomePageData.fromJson(e))
          .toList() as M;
    }
    if (<EventListHomePageDataList>[] is M) {
      return data.map<EventListHomePageDataList>((Map<String, dynamic> e) => EventListHomePageDataList.fromJson(e))
          .toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirm>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirm>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirm.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumDeviceOperation>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumDeviceOperation>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumDeviceOperation.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumDeviceClass>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumDeviceClass>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumDeviceClass.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumDeviceType>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumDeviceType>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumDeviceType.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumDeviceModel>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumDeviceModel>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumDeviceModel.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumDeviceStatus>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumDeviceStatus>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumDeviceStatus.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumConfirmType>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumConfirmType>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumConfirmType.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumAnalogType>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumAnalogType>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumAnalogType.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumConfirmMethod>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumConfirmMethod>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumConfirmMethod.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumConfirmResult>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumConfirmResult>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumConfirmResult.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListRtEventConfirmEnumConfirmReason>[] is M) {
      return data.map<EventListHomePageDataListRtEventConfirmEnumConfirmReason>((Map<String, dynamic> e) =>
          EventListHomePageDataListRtEventConfirmEnumConfirmReason.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListLocation>[] is M) {
      return data.map<EventListHomePageDataListLocation>((Map<String, dynamic> e) =>
          EventListHomePageDataListLocation.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListLocationEnumDeviceStatus>[] is M) {
      return data.map<EventListHomePageDataListLocationEnumDeviceStatus>((Map<String, dynamic> e) =>
          EventListHomePageDataListLocationEnumDeviceStatus.fromJson(e)).toList() as M;
    }
    if (<EventListHomePageDataListLocationEnumPositionType>[] is M) {
      return data.map<EventListHomePageDataListLocationEnumPositionType>((Map<String, dynamic> e) =>
          EventListHomePageDataListLocationEnumPositionType.fromJson(e)).toList() as M;
    }
    if (<UserLoginRequestEntity>[] is M) {
      return data.map<UserLoginRequestEntity>((Map<String, dynamic> e) => UserLoginRequestEntity.fromJson(e))
          .toList() as M;
    }
    if (<UserLoginRespEntity>[] is M) {
      return data.map<UserLoginRespEntity>((Map<String, dynamic> e) => UserLoginRespEntity.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespData>[] is M) {
      return data.map<UserLoginRespData>((Map<String, dynamic> e) => UserLoginRespData.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataEnumUserType>[] is M) {
      return data.map<UserLoginRespDataEnumUserType>((Map<String, dynamic> e) =>
          UserLoginRespDataEnumUserType.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataEnumUserRole>[] is M) {
      return data.map<UserLoginRespDataEnumUserRole>((Map<String, dynamic> e) =>
          UserLoginRespDataEnumUserRole.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataEnumUserStaff>[] is M) {
      return data.map<UserLoginRespDataEnumUserStaff>((Map<String, dynamic> e) =>
          UserLoginRespDataEnumUserStaff.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataEnumUserStatus>[] is M) {
      return data.map<UserLoginRespDataEnumUserStatus>((Map<String, dynamic> e) =>
          UserLoginRespDataEnumUserStatus.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataEnumUserAlarmMode>[] is M) {
      return data.map<UserLoginRespDataEnumUserAlarmMode>((Map<String, dynamic> e) =>
          UserLoginRespDataEnumUserAlarmMode.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataUserPic>[] is M) {
      return data.map<UserLoginRespDataUserPic>((Map<String, dynamic> e) => UserLoginRespDataUserPic.fromJson(e))
          .toList() as M;
    }
    if (<UserLoginRespDataAuth>[] is M) {
      return data.map<UserLoginRespDataAuth>((Map<String, dynamic> e) => UserLoginRespDataAuth.fromJson(e))
          .toList() as M;
    }
    if (<UserLoginRespDataAuthChildren>[] is M) {
      return data.map<UserLoginRespDataAuthChildren>((Map<String, dynamic> e) =>
          UserLoginRespDataAuthChildren.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataAuthChildrenChildren>[] is M) {
      return data.map<UserLoginRespDataAuthChildrenChildren>((Map<String, dynamic> e) =>
          UserLoginRespDataAuthChildrenChildren.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataAuthChildrenChildrenChildren>[] is M) {
      return data.map<UserLoginRespDataAuthChildrenChildrenChildren>((Map<String, dynamic> e) =>
          UserLoginRespDataAuthChildrenChildrenChildren.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataAuthChildrenChildrenChildrenChildren>[] is M) {
      return data.map<UserLoginRespDataAuthChildrenChildrenChildrenChildren>((Map<String, dynamic> e) =>
          UserLoginRespDataAuthChildrenChildrenChildrenChildren.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataSettingUser>[] is M) {
      return data.map<UserLoginRespDataSettingUser>((Map<String, dynamic> e) =>
          UserLoginRespDataSettingUser.fromJson(e)).toList() as M;
    }
    if (<UserLoginRespDataSettingUserInfoUserPushSetting>[] is M) {
      return data.map<UserLoginRespDataSettingUserInfoUserPushSetting>((Map<String, dynamic> e) =>
          UserLoginRespDataSettingUserInfoUserPushSetting.fromJson(e)).toList() as M;
    }
    if (<CountByCaredEntity>[] is M) {
      return data.map<CountByCaredEntity>((Map<String, dynamic> e) => CountByCaredEntity.fromJson(e)).toList() as M;
    }
    if (<CountByCaredData>[] is M) {
      return data.map<CountByCaredData>((Map<String, dynamic> e) => CountByCaredData.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (MarketMineEntity).toString(): MarketMineEntity.fromJson,
    (MarketMineData).toString(): MarketMineData.fromJson,
    (MarketMineDataGroups).toString(): MarketMineDataGroups.fromJson,
    (MarketMineDataTicker).toString(): MarketMineDataTicker.fromJson,
    (CompanyListEntity).toString(): CompanyListEntity.fromJson,
    (CompanyListData).toString(): CompanyListData.fromJson,
    (CompanyListDataList).toString(): CompanyListDataList.fromJson,
    (CompanyListDataListInfoCompany).toString(): CompanyListDataListInfoCompany.fromJson,
    (CompanyListDataListInfoCompanyEnumCompanyCategory).toString(): CompanyListDataListInfoCompanyEnumCompanyCategory
        .fromJson,
    (CompanyListDataListInfoCompanyEnumCompanyType).toString(): CompanyListDataListInfoCompanyEnumCompanyType.fromJson,
    (CompanyListDataListInfoCompanyEnumCompanyOnlineStatus)
        .toString(): CompanyListDataListInfoCompanyEnumCompanyOnlineStatus.fromJson,
    (CompanyListDataListInfoCompanyEnumCompanyEconomic).toString(): CompanyListDataListInfoCompanyEnumCompanyEconomic
        .fromJson,
    (CompanyListDataListInfoCompanyEnumCompanyRegulatorLevel)
        .toString(): CompanyListDataListInfoCompanyEnumCompanyRegulatorLevel.fromJson,
    (CompanyListDataListInfoCompanyEnumRegion).toString(): CompanyListDataListInfoCompanyEnumRegion.fromJson,
    (CompanyListDataListInfoCompanyEnumVerifyState).toString(): CompanyListDataListInfoCompanyEnumVerifyState.fromJson,
    (CompanyListDataListInfoCompanyEnumSourceFrom).toString(): CompanyListDataListInfoCompanyEnumSourceFrom.fromJson,
    (CompanyListDataListInfoCompanyEnumCompanyCheckoutStatus)
        .toString(): CompanyListDataListInfoCompanyEnumCompanyCheckoutStatus.fromJson,
    (EventListHomePageEntity).toString(): EventListHomePageEntity.fromJson,
    (EventListHomePageData).toString(): EventListHomePageData.fromJson,
    (EventListHomePageDataList).toString(): EventListHomePageDataList.fromJson,
    (EventListHomePageDataListRtEventConfirm).toString(): EventListHomePageDataListRtEventConfirm.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumDeviceOperation)
        .toString(): EventListHomePageDataListRtEventConfirmEnumDeviceOperation.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumDeviceClass)
        .toString(): EventListHomePageDataListRtEventConfirmEnumDeviceClass.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumDeviceType)
        .toString(): EventListHomePageDataListRtEventConfirmEnumDeviceType.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumDeviceModel)
        .toString(): EventListHomePageDataListRtEventConfirmEnumDeviceModel.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumDeviceStatus)
        .toString(): EventListHomePageDataListRtEventConfirmEnumDeviceStatus.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumConfirmType)
        .toString(): EventListHomePageDataListRtEventConfirmEnumConfirmType.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumAnalogType)
        .toString(): EventListHomePageDataListRtEventConfirmEnumAnalogType.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumConfirmMethod)
        .toString(): EventListHomePageDataListRtEventConfirmEnumConfirmMethod.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumConfirmResult)
        .toString(): EventListHomePageDataListRtEventConfirmEnumConfirmResult.fromJson,
    (EventListHomePageDataListRtEventConfirmEnumConfirmReason)
        .toString(): EventListHomePageDataListRtEventConfirmEnumConfirmReason.fromJson,
    (EventListHomePageDataListLocation).toString(): EventListHomePageDataListLocation.fromJson,
    (EventListHomePageDataListLocationEnumDeviceStatus).toString(): EventListHomePageDataListLocationEnumDeviceStatus
        .fromJson,
    (EventListHomePageDataListLocationEnumPositionType).toString(): EventListHomePageDataListLocationEnumPositionType
        .fromJson,
    (UserLoginRequestEntity).toString(): UserLoginRequestEntity.fromJson,
    (UserLoginRespEntity).toString(): UserLoginRespEntity.fromJson,
    (UserLoginRespData).toString(): UserLoginRespData.fromJson,
    (UserLoginRespDataEnumUserType).toString(): UserLoginRespDataEnumUserType.fromJson,
    (UserLoginRespDataEnumUserRole).toString(): UserLoginRespDataEnumUserRole.fromJson,
    (UserLoginRespDataEnumUserStaff).toString(): UserLoginRespDataEnumUserStaff.fromJson,
    (UserLoginRespDataEnumUserStatus).toString(): UserLoginRespDataEnumUserStatus.fromJson,
    (UserLoginRespDataEnumUserAlarmMode).toString(): UserLoginRespDataEnumUserAlarmMode.fromJson,
    (UserLoginRespDataUserPic).toString(): UserLoginRespDataUserPic.fromJson,
    (UserLoginRespDataAuth).toString(): UserLoginRespDataAuth.fromJson,
    (UserLoginRespDataAuthChildren).toString(): UserLoginRespDataAuthChildren.fromJson,
    (UserLoginRespDataAuthChildrenChildren).toString(): UserLoginRespDataAuthChildrenChildren.fromJson,
    (UserLoginRespDataAuthChildrenChildrenChildren).toString(): UserLoginRespDataAuthChildrenChildrenChildren.fromJson,
    (UserLoginRespDataAuthChildrenChildrenChildrenChildren)
        .toString(): UserLoginRespDataAuthChildrenChildrenChildrenChildren.fromJson,
    (UserLoginRespDataSettingUser).toString(): UserLoginRespDataSettingUser.fromJson,
    (UserLoginRespDataSettingUserInfoUserPushSetting).toString(): UserLoginRespDataSettingUserInfoUserPushSetting
        .fromJson,
    (CountByCaredEntity).toString(): CountByCaredEntity.fromJson,
    (CountByCaredData).toString(): CountByCaredData.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}